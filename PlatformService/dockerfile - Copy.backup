#FROM mcr.Microsoft.com/dotnet/sdk:8.0 AS build-env
##DOCKER path
#WORKDIR /app			
#
##Copy everything from .csproj of this previous folder and past it into docker path
#COPY *.csproj ./
##Run dotnet restore command to restore all of the packages
#RUN dotnet restore
#
##copy everything from the soruce directory to destination directory
#COPY . ./
#RUN dotnet publish -c Release -o out
#
#FROM mcr.Microsoft.com/dotnet/sdk:8.0
#WORKDIR /app
#COPY --from=build-env /app/out .
#ENTRYPOINT [ "dotnet","PlatformService.dll" ]

# Use the official .NET SDK image to build the application
# Step 1: Build stage
# Use the official .NET SDK image to build the application
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env

# Set the working directory in the container
WORKDIR /app

# Step 2: Copy the solution file and restore any dependencies
# Copy the solution file and project files into the container
COPY PlatformService.sln ./
COPY PlatformService/PlatformService.csproj ./PlatformService/
COPY CommandsService/CommandsService.csproj ./CommandsService/

# Restore dependencies for the solution
RUN dotnet restore

# Step 3: Copy all source files into the container
# Copy all other source code into the container
COPY . ./

# Step 4: Build the application in Release mode
RUN dotnet publish -c Release -o out

# Step 5: Create the runtime image
# Use the official .NET ASP.NET image as a base to run the application
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base

# Set the working directory in the container for the runtime environment
WORKDIR /app

# Copy the published output from the build stage
COPY --from=build-env /app/out .
# Step 6: Define the entry point for the container to run the app
ENTRYPOINT ["dotnet", "PlatformService.dll"]
